/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Basic health check
         * @description Returns the current health status of the API Gateway
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Readiness check
         * @description Comprehensive readiness check including dependency status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service is ready */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReadinessResponse"];
                    };
                };
                /** @description Service is not ready */
                503: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReadinessResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle authentication callback
         * @description Process authentication callback from Supabase
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description JWT access token from Supabase */
                        access_token: string;
                        /** @description Refresh token from Supabase */
                        refresh_token?: string;
                    };
                };
            };
            responses: {
                /** @description Authentication successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                /** @description Authentication failed */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/account/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Retrieve the authenticated user's profile information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User profile retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfile"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete user account
         * @description Initiate deletion of the authenticated user's account
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Account deletion initiated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Account deletion initiated. You will receive a confirmation email. */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update user profile
         * @description Update the authenticated user's profile information
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProfileRequest"];
                };
            };
            responses: {
                /** @description Profile updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfile"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/v1/uploads/sign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate signed upload URL
         * @description Generate a pre-signed URL for direct document upload to object storage
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SignedUploadRequest"];
                };
            };
            responses: {
                /** @description Signed URL generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SignedUploadResponse"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/uploads/{storageKey}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete upload
         * @description Confirm completion of document upload and create document record
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The storage key for the uploaded file */
                    storageKey: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CompleteUploadRequest"];
                };
            };
            responses: {
                /** @description Upload completed and document created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Document"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user documents
         * @description Retrieve a paginated list of documents for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (1-based) */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by document status */
                    status?: components["schemas"]["DocumentStatus"];
                    /** @description Search in document names */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Documents retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get document details
         * @description Retrieve detailed information about a specific document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document ID */
                    documentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Document"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Document not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete document
         * @description Delete a document and all associated data
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document ID */
                    documentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Document not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/documents/{documentId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download document
         * @description Generate a pre-signed URL for downloading the original document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Document ID */
                    documentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Download URL generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uri
                             * @description Pre-signed download URL
                             */
                            downloadUrl?: string;
                            /**
                             * Format: date-time
                             * @description URL expiration timestamp
                             */
                            expiresAt?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Document not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user jobs
         * @description Retrieve a paginated list of jobs for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (1-based) */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by job status */
                    status?: components["schemas"]["JobStatus"];
                    /** @description Filter by job type */
                    type?: components["schemas"]["JobType"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jobs retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create new job
         * @description Submit a new document processing job
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateJobRequest"];
                };
            };
            responses: {
                /** @description Job created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job details
         * @description Retrieve detailed information about a specific job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Cancel job
         * @description Cancel a pending or running job
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job ID */
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job cancelled successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Job cannot be cancelled (already completed or failed) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all users (Admin only)
         * @description Retrieve a paginated list of all users (admin access required)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (1-based) */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by user role */
                    role?: components["schemas"]["UserRole"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Users retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admin/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all jobs (Admin only)
         * @description Retrieve a paginated list of all jobs across all users (admin access required)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (1-based) */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by job status */
                    status?: components["schemas"]["JobStatus"];
                    /** @description Filter by user ID */
                    userId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Jobs retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example ok */
            status: string;
            /** Format: date-time */
            timestamp: string;
            /** @description Server uptime in seconds */
            uptime: number;
            /** @example 1.0.0 */
            version: string;
        };
        ReadinessResponse: {
            /** @enum {string} */
            status: "ready" | "not_ready";
            services: {
                /** @enum {string} */
                database: "healthy" | "unhealthy" | "not_configured";
                /** @enum {string} */
                redis: "healthy" | "unhealthy" | "not_configured";
                /** @enum {string} */
                storage: "healthy" | "unhealthy" | "not_configured";
            };
        };
        AuthResponse: {
            user: components["schemas"]["UserProfile"];
            session: {
                access_token?: string;
                refresh_token?: string;
                /** Format: date-time */
                expires_at?: string;
            };
        };
        UserProfile: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            fullName?: string | null;
            /** Format: uri */
            avatarUrl?: string | null;
            /** @default UTC */
            timezone: string;
            emailVerified: boolean;
            role: components["schemas"]["UserRole"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateProfileRequest: {
            fullName?: string | null;
            timezone?: string;
        };
        /** @enum {string} */
        UserRole: "admin" | "user";
        UserList: {
            users: components["schemas"]["UserProfile"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        SignedUploadRequest: {
            /** @description Original file name */
            fileName: string;
            /** @description MIME type of the file */
            mimeType: string;
            /** @description File size in bytes */
            size: number;
        };
        SignedUploadResponse: {
            /**
             * Format: uri
             * @description Pre-signed upload URL
             */
            uploadUrl: string;
            /** @description Unique storage key for the file */
            storageKey: string;
            /**
             * Format: date-time
             * @description Upload URL expiration timestamp
             */
            expiresAt: string;
        };
        CompleteUploadRequest: {
            /** @description Display name for the document */
            name: string;
            /** @description Additional metadata for the document */
            metadata?: {
                [key: string]: unknown;
            };
        };
        Document: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            /** @description Display name of the document */
            name: string;
            /** @description Original file name */
            originalName: string;
            /** @description MIME type of the file */
            mimeType: string;
            /** @description File size in bytes */
            size: number;
            /** @description Storage key for the file */
            storageKey: string;
            status: components["schemas"]["DocumentStatus"];
            /** @description Document metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** @description Extracted text content */
            extractedText?: string | null;
            /** @description Structured data extracted from document */
            structureData?: {
                [key: string]: unknown;
            } | null;
            /** @description Storage key for document thumbnail */
            thumbnailKey?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @enum {string} */
        DocumentStatus: "uploading" | "processing" | "completed" | "failed";
        DocumentList: {
            documents: components["schemas"]["Document"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        Job: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            /** Format: uuid */
            documentId?: string | null;
            type: components["schemas"]["JobType"];
            status: components["schemas"]["JobStatus"];
            source: components["schemas"]["JobSource"];
            /**
             * Format: uri
             * @description Source URL for URL-based jobs
             */
            sourceUrl?: string | null;
            /** @description Storage key for S3-based jobs */
            sourceKey?: string | null;
            /** @description Job metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** @description Job processing options */
            options: {
                [key: string]: unknown;
            };
            /** @description Reference to job results */
            resultRef?: string | null;
            /** @description Error message if job failed */
            error?: string | null;
            /** @description Number of processing attempts */
            attempts: number;
            /** @description Maximum number of attempts allowed */
            maxAttempts: number;
            /** @description Job progress percentage */
            progress: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            completedAt?: string | null;
        };
        CreateJobRequest: {
            type: components["schemas"]["JobType"];
            source: components["schemas"]["JobSource"];
            /**
             * Format: uuid
             * @description Required for upload-based jobs
             */
            documentId?: string;
            /**
             * Format: uri
             * @description Required for URL-based jobs
             */
            sourceUrl?: string;
            /** @description Required for S3-based jobs */
            sourceKey?: string;
            /**
             * @description Job processing options
             * @default {}
             */
            options: {
                [key: string]: unknown;
            };
        } & ({
            /** @constant */
            source?: "upload";
        } | {
            /** @constant */
            source?: "url";
        } | {
            /** @constant */
            source?: "s3";
        });
        /** @enum {string} */
        JobType: "analyze_structure" | "extract_text" | "parse_document";
        /** @enum {string} */
        JobStatus: "cancelled" | "completed" | "failed" | "pending" | "processing";
        /** @enum {string} */
        JobSource: "s3" | "upload" | "url";
        JobList: {
            jobs: components["schemas"]["Job"][];
            pagination: components["schemas"]["PaginationMetadata"];
        };
        PaginationMetadata: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
            hasNext: boolean;
            hasPrevious: boolean;
        };
        ErrorResponse: {
            /** @description Error code */
            error: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Additional error details */
            details?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            timestamp: string;
            /** @description Request ID for tracking */
            requestId?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
